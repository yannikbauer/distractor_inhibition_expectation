%% ana_EEG_04_TF
% Fourth analysis script. File preprocessing and time frequency (TF) analysis using fieldtrip.
%
% >>>INPUTS>>>:
% NAME                                  TYPE       DESCRIPTION
% sXX_XX_filt_epFixPost1000.set         struct     epoched EEG data
% sXX_XX_filt_epFixPost1000.fdt         struct     epoched EEG data in fieldtrip format
% sXX_XX_badTrials_epFixPost1000.mat    double     list of bad trials (artefacts, blinks) for exclusion
% sXX_XX_condList_epFixPost1000.mat     struct     list of valid trials w condition triggers
% subjDetails.m                         struct     script creating subject list and bad channels
% condTrigCodes.mat                     struct     script creating list of condition trigger codes
%
% <<<OUTPUTS<<<:
% NAME                                  TYPE       DESCRIPTION
% sXX_XX_filt_epFixPost1000_ft.mat      struct     epoched EEG data preprocessed by fieldtrip
% sXX_XX_filt_epFixPost1000_ft_tf.mat   struct     TF analysed data 
% ---plots---                                      TF analysis plots
% 
% INFO:
% - Question/ discussion comments are marked as '##[Initials]:...'
%
% @ Attention Group 2016, Oxford Centre for Human Brain Activity, Dept. of Psychiatry,
% Oxford University

%% TODO
% ##YB:
% - figure out effect of different averaging methods (l.191 ff)
% - quadrant-wise analysis
% - plot t-stat
% - check channels
% - get individual participant peak alpha power
% - logtransform
% - info: we did not find alph-sync for inhib
% ##HvL:  
% - Figure out how everything works, i.e. why from .25 we are looking at the
%     stat over all conditions etc. Then look for topoplot function and make
%     some topographies of alpha. Also meet up with Mark to go forward on the
%     EEG analysis.

%% Setup
clear all;
close all;
% clc;

% Directory paths  
dirs.dat =  '/Volumes/Y/distractor_inhibition_expectation/EEG/data/eeg'; % input data
dirs.code = '/Users/Yannik/Documents/MATLAB/OX/distractor_inhibition_expectation/analysis/'; % analysis code
dirs.ft = '/Users/Yannik/Documents/MATLAB/Addins/fieldtrip-20160215'; % fieldtrip toolbox
addpath(genpath(dirs.dat), genpath(dirs.code), genpath(dirs.ft));

% Load EEG channel configurations
try run(fullfile(dirs.code,'eegChanConfig.m')), % run eegChanConfig.m
catch, error('Script for generation of EEG channel configurations not found!');
end
% Add posterior left and right channels
chan.pLeft = {'PO3','P3','P1','P5','PO7','O1','P7'}';
chan.pRight = {'PO4','P4','P2','P6','PO8','O2','P8'}';        
% Specify channels of interest (here: posterior channels without O1 and O2)
chan.choi.L = {'PO3','P3','P1','P5','PO7','P7','TP7'}';
chan.choi.R = {'PO4','P4','P2','P6','PO8','P8','TP8'}';        
% Flip chans for topoplots
% chan.orig = [01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ...
%     29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60];
% chan.flip = [02 01 03 04 12 13 11 19 18 24 07 05 06 14 15 26 25 09 08 20 21 27 29 10 17 16 22 30 ...
%     23 28 35 34 33 32 31 44 42 43 49 41 40 37 38 36 46 45 50 53 39 47 54 57 48 51 59 58 52 56 55 60];

% Condition Trigger Codes (runs and updates external script)
try run(fullfile(dirs.code,'condTrigCodes.m')),
catch, error('Script for condition trigger codes not found!');
end

% Specify contrast of interest (coi) parameter
coi.codes = {cond.T.p25.R; cond.T.p25.L; cond.T.p75.R; cond.T.p75.L; cond.T.p100.R; cond.T.p100.L;...
    cond.D.p25.R; cond.D.p25.L; cond.D.p75.R; cond.D.p75.L; cond.D.p100.R; cond.D.p100.L};
coi.names = {'T25R','T25L','T75R','T75L','T100R','T100L',...
    'D25R','D25L','D75R','D75L','D100R','D100L'};
coi.namesCombi = {'T25','T75','T100','D25','D75','D100'};

% Subject Details (runs and updates external script)
try run(fullfile(dirs.code,'subjectDetails.m')),
catch, error('Script for generation of subject details not found!');
end
nSubs = length(subDetails);
doSubs = [3];
% doSubs = [1:6,8,10:18,20:22]; % contains participant exclusion based on previous analyses of blinks etc.
% doSubs = [1,2,6,7,8,10,11,13,14,15,17,18,20,21,22];

%% TF
fprintf('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Starting TF Analysis %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n');
tic
sCount = 1;
for iSub = doSubs        
    fprintf('\nDoing subject %d: \n',iSub)            
    %% Make/ Load Fieldtrip Files
    % (1) Pre-process epoched file using fieldtrip    > sXX_XX_filt_epFixPost1000_ft.mat
    % (2) Do TF on preprocessed file                  > sXX_XX_filt_epFixPost1000_ft_ft.mat
    
    % Subject directory path
        dirs.sub = fullfile(dirs.dat, subDetails(iSub).fid{1});    
    % File names for preprocessed fieldtrip file
        fid.ft_prep.in = [subDetails(iSub).fid{1} '_filt_epFixPost1000.set'];
        fid.ft_prep.out = [subDetails(iSub).fid{1} '_filt_epFixPost1000_ft.mat'];
    % File names for TF file
        fid.ft_tf.in = fid.ft_prep.out;
        fid.ft_tf.out = [subDetails(iSub).fid{1} '_filt_epFixPost1000_ft_tf.mat'];

    % (1) Pre-process epoched file using fieldtrip
    % (unless done in ana_EEG_03_artefactRm.m)
    if exist(fullfile(dirs.sub,fid.ft_prep.out),'file') && ~exist(fullfile(dirs.sub,fid.ft_tf.out),'file')
        fprintf('\tFile pre-processing in fieldtrip already done. Loading file...\n');
        load(fullfile(dirs.sub,fid.ft_prep.out));
    elseif ~exist(fullfile(dirs.sub,fid.ft_prep.out), 'file') 
        fprintf('\tPreprocessing file in fieldtrip...\n')
        cfg             = [];
        cfg.dataset     = fullfile(dirs.sub,fid.ft_prep.in);
        cfg.continuous  = 'no';
        %cfg.baselinewindow = [-0.05 0.05];
        cfg.detrend     = 'yes';
        cfg.demean      = 'yes';
        dat = ft_preprocessing(cfg); % do preprocessing
        save(fullfile(dirs.sub,fid.ft_prep.out),'dat');
    end
    
    % (2) Do TF on preprocessed file  
    if exist(fullfile(dirs.sub,fid.ft_tf.out),'file')
        fprintf('\tTF analysis already done. Loading file...\n')
        load(fullfile(dirs.sub,fid.ft_tf.out));        
    else
        fprintf('\tDoing TF analysis on converted fieldtrip file...\n')
        load(fullfile(dirs.sub,fid.ft_tf.in));
        cfg              = [];
        cfg.output       = 'pow';
        cfg.channel      = [chan.pLeft, chan.pRight];
        cfg.method       = 'mtmconvol';
        cfg.taper        = 'hanning';
        cfg.foi          = 5:1:30; % frequency of interest (foi): 5 to 30 Hz in steps of 1 Hz
        cfg.t_ftimwin    = 5./cfg.foi; % length of time window: 5 cycles per freq, i.e. 0.5 s for alpha
        cfg.toi          = dat.time{1}(1):0.1:dat.time{1}(end); % time of interest, slides from x to y sec 0.1 sec
                            % determines time resolution of plot, but may take time, so use gsmooth
        cfg.keeptrials   = 'yes';
        % ##HvL: maybe pad with zeros to avoid curtain <> ##YB: does not add any real data, better leave
        tfdat = ft_freqanalysis(cfg, dat); % do time frequency analysis
        save(fullfile(dirs.sub,fid.ft_tf.out),'tfdat','-v7.3');
    end
    
    %% Trial Exclusion Criteria   
    % Load subject-specific condition triggers and bad trials
    try
        load(fullfile(dirs.sub, [subDetails(iSub).fid{1} '_condList_epFixPost1000.mat']))
        load(fullfile(dirs.sub, [subDetails(iSub).fid{1}, '_badTrials_epFixPost1000.mat']))
    catch
        warning('Files containing subject-specific bad trials and condition triggers not found!')
    end   
    %badTrials = [];
    % exclude first 4 trials of block because low expectations
    lowExpectTrials = find(condList.fix <= 4); 

    %% Log-transform
    % ##YB:do? Did not seem to change analysis much. not so important if noramlized raw data.
    % important for ANOVA, or t-test bec relies on normal distribution (any parametric)
    doLog = false;
    if doLog
       tfdat.powspctrm = 10*log10(tfdat.powspctrm); 
    end
    
    %% Single-Subject Power Analyses        
    % Loop through all contrasts of interest (coi) to get power contrast
    for iCoi = 1:length(coi.codes)
        
        % Index conditions of interest and exclude vbadTrials for those conditions from analysis 
        trialIdx = setdiff(find(ismember(condList.stim, coi.codes{iCoi,1})), vbadTrials);
        trialIdx = setdiff(trialIdx,lowExpectTrials);
        tNums(sCount,1) = length(trialIdx); % get number of trials for that condition
        
        % Define contra and ipsi depending on stimulus side
        if regexp(coi.names{iCoi},'R')
            contra = ismember(tfdat.label, chan.choi.L);
            ipsi = ismember(tfdat.label, chan.choi.R);
        elseif regexp(coi.names{iCoi},'L')
            contra = ismember(tfdat.label, chan.choi.R);
            ipsi = ismember(tfdat.label, chan.choi.L);
        end
        
        % Get average power spectrum contrast contra-ipsi across trials
        % ##YB: exploring different methods of averaging tfdat.powspctrm (trial,chan,freq,time)
        
        % (0) OLD: UNNORMALIZED, avg across trials and chans, then contra-ipsi; result: 26x106
        pwr(sCount).(coi.names{iCoi}) = squeeze(mean(mean(tfdat.powspctrm(trialIdx,contra,:,:),1),2)) ...
            - squeeze(mean(mean(tfdat.powspctrm(trialIdx,ipsi,:,:),1),2));            
        
        % (1) avg across trials, then contra-ipsi; normalized; result: 7x26x106 (chan,freq,time)
        pwr1(sCount).(coi.names{iCoi}) = (squeeze(mean(tfdat.powspctrm(trialIdx,contra,:,:),1)) ...
            - squeeze(mean(tfdat.powspctrm(trialIdx,ipsi,:,:),1))) ...
            ./ (squeeze(mean(tfdat.powspctrm(trialIdx,contra,:,:),1)) ...
            + squeeze(mean(tfdat.powspctrm(trialIdx,ipsi,:,:),1)));  
        
        % (2) avg across trials and chans, then contra-ipsi; normalized; result: 26x106
        pwr2(sCount).(coi.names{iCoi}) = squeeze(mean(mean(tfdat.powspctrm(trialIdx,contra,:,:),1),2)) ...
            - squeeze(mean(mean(tfdat.powspctrm(trialIdx,ipsi,:,:),1),2)) ...
            ./ (squeeze(mean(mean(tfdat.powspctrm(trialIdx,contra,:,:),1),2)) ...
            + squeeze(mean(mean(tfdat.powspctrm(trialIdx,ipsi,:,:),1),2)));  
        
        % (3) contra-ipsi for each trial, then avg across trials; normalized; result: 7x26x106
        pwr3(sCount).(coi.names{iCoi}) = squeeze(mean((tfdat.powspctrm(trialIdx,contra,:,:) ...
            - tfdat.powspctrm(trialIdx,ipsi,:,:)) ...
            ./ (tfdat.powspctrm(trialIdx,contra,:,:) ...
            + tfdat.powspctrm(trialIdx,ipsi,:,:)),1));
        
        % (4) contra-ipsi for each trial, then avg across trial and chans; normalized; result: 26x106
        pwr4(sCount).(coi.names{iCoi}) = squeeze(mean(mean((tfdat.powspctrm(trialIdx,contra,:,:) ...
            - tfdat.powspctrm(trialIdx,ipsi,:,:)) ...
            ./ (tfdat.powspctrm(trialIdx,contra,:,:) ...
            + tfdat.powspctrm(trialIdx,ipsi,:,:)),1),2));                
    end % iCoi = 1:length(coi.codes)
    
    % Combine power contrasts for both stimulus sides 
    count = 1;
    for iCombi = 1:2:length(coi.names)
        pwr(sCount).(coi.namesCombi{count}) = ...
            (pwr(sCount).(coi.names{iCombi}) + pwr(sCount).(coi.names{iCombi+1}));
        
        pwr1(sCount).(coi.namesCombi{count}) = ...
            (pwr1(sCount).(coi.names{iCombi}) + pwr1(sCount).(coi.names{iCombi+1}));
        
        pwr2(sCount).(coi.namesCombi{count}) = ...
            (pwr2(sCount).(coi.names{iCombi}) + pwr2(sCount).(coi.names{iCombi+1}));
        
        pwr3(sCount).(coi.namesCombi{count}) = ...
            (pwr3(sCount).(coi.names{iCombi}) + pwr3(sCount).(coi.names{iCombi+1}));
        
        pwr4(sCount).(coi.namesCombi{count}) = ...
            (pwr4(sCount).(coi.names{iCombi}) + pwr4(sCount).(coi.names{iCombi+1}));
        
        count = count + 1; 
    end        
 
    %% Plot: Subject TF
    subjPlot = false;
    if subjPlot
        % close all
        xLims = [-.75 .4]; % time interval label
        yLims = [4 20]; % frequency interval
        % cLims = [-2 2]; % intensity-colour limits
        
        figTF = figure;
        for iTF = 1:length(coi.namesCombi)
            subplot(2,3,iTF);
            imagesc(tfdat.time-1, tfdat.freq, pwr(1,sCount).(coi.namesCombi{iTF}));
            %     set(gca,'Clim',cLims);
            set(gca,'Xlim',xLims);
            set(gca,'Ylim', yLims);
            axis xy; % invert axes
            title(coi.namesCombi{iTF});
        end
        suptitle(strcat('subject: ', num2str(iSub)));
        saveas(figTF,fullfile(dirs.dat, 'figs', strcat(subDetails(iSub).fid{1}, '.png')))
    end
    
    sCount = sCount + 1;
end % iSub = doSubs
toc
return;

%% Group Power Analysis
% TODO: 
% - t-test in addition to group mean power
% - T100minT25 = T100-T25;

% Use anonymous function to average across array of structures
% ##YB: Note to self: alternatives: arrayfun(), struct2cell()
structMean = @(struct,field) mean(cat(3,struct(:).(field)),3);

fields = fieldnames(pwr);
for iCond = 1:numel(fields)
    meanPwr.(fields{iCond}) = structMean(pwr,fields{iCond});
end

fields = fieldnames(pwr2);
for iCond = 1:numel(fields)
    meanPwr2.(fields{iCond}) = structMean(pwr2,fields{iCond});
end

fields = fieldnames(pwr4);
for iCond = 1:numel(fields)
    meanPwr4.(fields{iCond}) = structMean(pwr4,fields{iCond});
end


%% smooth data
% TODO: make into loop (below just one condition example)
% for i=1:size(D25LR,1)
%     for j=1:size(D25LR,2)
%         D25LR(i,j) = gsmooth(D25LR(i,j), .5);
%     end
% end


%% Plot: Group TF
% close all
xLims = [-.75 .4]; % time interval label
yLims = [4 20]; % frequency interval
% cLims = [-2 2]; % intensity-colour limits

figTF = figure;
for iTF = 1:length(coi.namesCombi)
    subplot(2,3,iTF);
    imagesc(tfdat.time-1, tfdat.freq, meanPwr.(coi.namesCombi{iTF}));
%     set(gca,'Clim',cLims);
    set(gca,'Xlim',xLims);
    set(gca,'Ylim', yLims);
    axis xy; % invert axes
    title(coi.namesCombi{iTF});
end
% axSupTitle = suptitle('old method: unnormalized; avg across trials, then contra-ipsi'); 
% saveas(figTF,fullfile(dirs.dat, 'figs','group_old_unnorm-AvgThenCvI.png'))


%% Plot: Line Graphs of Power
% Define frequencies and times of interest for plot
foi = find(tfdat.freq>=8 & tfdat.freq<=12);
toi = find(tfdat.time>=0.5 & tfdat.time<=1);

% Get mean power for fois
for iLine = 1:length(coi.namesCombi)
    lineDat(:,iLine) = squeeze(mean(meanPwr2.(coi.namesCombi{iLine})(foi,:),1));
end

% Plot line graph
figLineBar = figure; 
subplot(1,2,1);
hold on
for iLine = 1:length(coi.namesCombi)
    lineH = plot(tfdat.time-1, lineDat(:,iLine),'Linewidth',2);
    if iLine == 1 || iLine == 4, set(lineH, 'LineStyle', ':'),
    elseif iLine == 2 || iLine == 5, set(lineH, 'LineStyle', '--'),
    elseif iLine == 3 || iLine == 6, set(lineH, 'LineStyle', '-'),
    end
    if iLine <= length(coi.namesCombi)/2, set(lineH, 'Color', 'b'),
    else set(lineH, 'Color', 'r')
    end
end
legend(coi.namesCombi);
set(gca,'XLim',[-.75 .4]);
% set(gca,'YLim',[-1 1]);
% plotPos = [0.1 0.1 0.6 0.75]; subplot('Position',plotPos)
hold off

%% Plot: Bar Chart of power
% TODO: 
% - add SEM!
% - make into boxplot w connected subj data points or violin plot, indicate variance, ...

% Get mean power of line data to get one scalar value for each condition
barDat = mean(lineDat(toi,:),1);

% Plot bar chart
subplot(1,2,2);
hold on
for iBar = 1:size(barDat,2)
    barH = bar(iBar, barDat(iBar));
    set(gca, 'xtick',[1:size(barDat,2)]', 'xticklabel',coi.namesCombi)
    if iBar<=size(barDat,2)/2, set(barH,'FaceColor','b'),
    else set(barH,'FaceColor','r'),
    end
end
hold off
% plotPos = [plotPos(1)+plotPos(3)+0.05, plotPos(2), 1-(plotPos(1)+plotPos(3)+0.05)-0.05,plotPos(4)];
% subplot('Position', plotPos);

% set(gca, 'PlotBoxAspectRatio', [1,1,1])

% barDat(:,1) = (squeeze(mean(mean(T25RC(:,foi,toi),2),3)) ...
%     - squeeze(mean(mean(T25RI(:,foi,toi),2),3))) ...
%     + (squeeze(mean(mean(T25LC(:,foi,toi),2),3)) ...
%     - squeeze(mean(mean(T25LeftIpsi(:,foi,toi),2),3)));

%% Cluster analysis for conditions
% TODO: check cluster analysis 

% cT25=ClusterCorrection2(cT25LR,500,0.05);
% ...
